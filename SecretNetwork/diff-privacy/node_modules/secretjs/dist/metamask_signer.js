"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetaMaskSigner = void 0;
const sha256_1 = require("@noble/hashes/sha256");
const secp256k1 = __importStar(require("@noble/secp256k1"));
const _1 = require(".");
const wallet_amino_1 = require("./wallet_amino");
/**
 * MetaMaskSigner is a signer capable of signing on transactions using MetaMask.
 */
class MetaMaskSigner {
    constructor(ethProvider, ethAddress, publicKey) {
        this.ethProvider = ethProvider;
        this.ethAddress = ethAddress;
        this.publicKey = publicKey;
    }
    static create(ethProvider, ethAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            const localStorageKey = `secretjs_${ethAddress}_pubkey`;
            const publicKeyHex = localStorage.getItem(localStorageKey);
            if (publicKeyHex) {
                // TODO verify that ethAddress can be derived from publicKeyHex
                return new MetaMaskSigner(ethProvider, ethAddress, (0, _1.fromHex)(publicKeyHex));
            }
            const msgHash = (0, sha256_1.sha256)("blabla");
            const sigResult = yield ethProvider.request({
                method: "eth_sign",
                params: [ethAddress, "0x" + (0, _1.toHex)(msgHash)],
            });
            const sig = (0, _1.fromHex)(sigResult.slice(2, -2));
            const recoveryBit = parseInt(sigResult.slice(-2), 16) - 27;
            const publicKey = secp256k1.recoverPublicKey(msgHash, sig, recoveryBit, true);
            localStorage.setItem(localStorageKey, (0, _1.toHex)(publicKey));
            return new MetaMaskSigner(ethProvider, ethAddress, publicKey);
        });
    }
    getAccounts() {
        return __awaiter(this, void 0, void 0, function* () {
            return [
                {
                    address: (0, wallet_amino_1.pubkeyToAddress)(this.publicKey),
                    algo: "secp256k1",
                    pubkey: this.publicKey,
                },
            ];
        });
    }
    signAmino(address, signDoc) {
        return __awaiter(this, void 0, void 0, function* () {
            if (address !== (0, wallet_amino_1.pubkeyToAddress)(this.publicKey)) {
                throw new Error(`Address ${address} not found in wallet`);
            }
            const messageHash = (0, sha256_1.sha256)((0, wallet_amino_1.serializeStdSignDoc)(signDoc));
            const sigResult = yield this.ethProvider.request({
                method: "eth_sign",
                params: [this.ethAddress, "0x" + (0, _1.toHex)(messageHash)],
            });
            const signature = (0, _1.fromHex)(sigResult.slice(2, -2));
            return {
                signed: signDoc,
                signature: (0, wallet_amino_1.encodeSecp256k1Signature)(this.publicKey, signature),
            };
        });
    }
}
exports.MetaMaskSigner = MetaMaskSigner;
//# sourceMappingURL=metamask_signer.js.map