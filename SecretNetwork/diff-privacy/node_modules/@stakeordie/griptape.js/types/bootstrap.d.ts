import { Coin, StdFee } from 'secretjs/types/types.js';
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult, BroadcastMode } from 'secretjs';
import { KeplrViewingKeyManager, ViewingKeyManager, PermitManager } from './auth/index';
export { BroadcastMode };
export interface DefaultFees {
    upload?: number;
    init?: number;
    exec?: number;
    send?: number;
}
export interface Config {
    restUrl: string;
    chainId?: string;
    broadcastMode?: BroadcastMode;
    defaultFees?: DefaultFees;
}
export interface AccountProvider {
    getAddress: () => string;
    getSigner: () => any;
    getSeed: () => any;
    getName: () => string;
}
interface WalletInfo {
    address: string | undefined;
    name: string | undefined;
}
export declare type AccountProviderGetter = (chainId: string) => Promise<AccountProvider | undefined>;
export declare let provider: AccountProvider | undefined;
export declare const viewingKeyManager: ViewingKeyManager;
export declare const keplrViewingKeyManager: KeplrViewingKeyManager;
export declare const permitManager: PermitManager;
export declare function getConfig(): Config | undefined;
export declare function getAddress(): string | undefined;
export declare function getWalletInfo(): WalletInfo;
export declare function isAccountAvailable(): boolean;
export declare function gripApp(_config: string | Config, accountProviderGetter: AccountProviderGetter, runApp: () => void): Promise<void>;
export declare function bootstrap(): Promise<void>;
export declare function shutdown(): void;
export declare function queryContract(address: string, queryMsg: Record<string, unknown>, addedParams?: Record<string, unknown>, codeHash?: string): Promise<Record<string, unknown>>;
export declare function executeContract(contractAddress: string, handleMsg: Record<string, unknown>, memo?: string, transferAmount?: readonly Coin[], fee?: StdFee, codeHash?: string): Promise<ExecuteResult>;
export declare let accountChangedCallback: () => void;
export declare function getKeplrAccountProvider(): AccountProviderGetter;
export declare function getChainId(): Promise<string>;
export declare function getHeight(): Promise<number>;
export declare function instantiate(codeId: number, initMsg: object, label: string): Promise<import("secretjs").InstantiateResult>;
export declare function getContracts(codeId: number): Promise<readonly {
    readonly address: string;
    readonly codeId: number;
    readonly creator: string;
    readonly label: string;
}[]>;
export declare function getClient(): CosmWasmClient;
export declare function getSigningClient(): SigningCosmWasmClient;
export declare function getNativeCoinBalance(): Promise<string>;
