import { Amount, ModuleBaseResponse, BaseReq, Deposit, Fee, ModuleErrorResponse, ProposalParamChangeRequest, Signature } from './types';
import BlockchainModule from './base';
export interface DepositTokensBodyReq {
    base_req: BaseReq;
    Depositor: string;
    amount: Deposit[];
}
export interface SubmitProposalBodyReq {
    base_req: BaseReq;
    title: string;
    description: string;
    proposal_type: string;
    proposer: string;
    initial_Deposit: Deposit[];
}
export interface PostProposalResponse {
    type: string;
    value: ProposalSubmitValue;
}
export interface ProposalSubmitValue {
    msg: Msg[];
    fee: Fee;
    signatures: Signature;
    memo: string;
}
export interface Msg {
    type: string;
    value: {
        content: {
            type: string;
            value: ProposalContent;
        };
        initial_Deposit: Deposit[];
        proposer: string;
    };
}
export interface VoteProposalBodyReq {
    base_req: BaseReq;
    voter: string;
    option: string;
}
export interface GetProposalsResponse extends ModuleBaseResponse {
    result: ProposalValue[];
}
export interface ProposalValue {
    proposal_id: number;
    title: string;
    description: string;
    proposal_type: string;
    proposal_status: string;
    final_tally_result: FinalTallyResult;
    submit_time: string;
    total_Deposit: Deposit[];
    voting_start_time: string;
}
export interface FinalTallyResult {
    yes: string;
    abstain: string;
    no: string;
    no_with_veto: string;
}
export interface GetProposalAtResponse extends ModuleBaseResponse {
    result: {
        content: ProposalContent;
        id: string;
        proposal_status: string;
        final_tally_result: FinalTallyResult;
        submit_time: Date;
        Deposit_end_time: Date;
        total_Deposit: Deposit[];
        voting_start_time: Date;
        voting_end_time: Date;
    };
}
export interface ProposalContent {
    type: string;
    value: {
        title: string;
        description: string;
    };
}
export interface ProposalProposerResponse extends ModuleBaseResponse {
    result: {
        proposal_id: string;
        proposer: string;
    };
}
export interface GetDepositResponse {
    result: DespositResult[];
}
export interface DespositResult {
    amount: Amount[];
    proposal_id: string;
    depositor: string;
}
export interface ProposalVotesResponse extends ModuleBaseResponse {
    result: {
        voter: string;
        proposal_id: string;
        option: string;
    };
}
export interface ProposalTallyResponse extends ModuleBaseResponse {
    result: DespositResult;
}
export interface DepositParametersResponse extends ModuleBaseResponse {
    result: {
        min_deposit: Amount[];
        max_deposit_period: string;
    };
}
export interface TallyParametersResponse extends ModuleBaseResponse {
    result: {
        quorum: string;
        threshold: string;
        veto: string;
    };
}
export interface VotingParametersResponse extends ModuleBaseResponse {
    result: {
        voting_period: string;
    };
}
export declare class GovernanceModule extends BlockchainModule {
    submitProposal(proposal: SubmitProposalBodyReq): Promise<PostProposalResponse | ModuleErrorResponse>;
    getProposals(params: {
        voter?: string;
        Depositor?: string;
        status?: string;
    }): Promise<GetProposalsResponse | ModuleErrorResponse>;
    changeProposalParameter(body: ProposalParamChangeRequest): Promise<ProposalSubmitValue | ModuleErrorResponse>;
    getProposal(id: string): Promise<GetProposalAtResponse | ModuleErrorResponse>;
    getProposalProposer(id: string): Promise<ProposalProposerResponse | ModuleErrorResponse>;
    getProposalDeposits(id: string): Promise<GetDepositResponse | ModuleErrorResponse>;
    depositTokensProposal(id: string, body: DepositTokensBodyReq): Promise<PostProposalResponse | ModuleErrorResponse>;
    getDepositAt(id: string, depositorAddr: string): Promise<DespositResult | ModuleErrorResponse>;
    getProposalVotes(id: string): Promise<ProposalVotesResponse | ModuleErrorResponse>;
    voteProposal(id: string, vote: VoteProposalBodyReq): Promise<PostProposalResponse | ModuleErrorResponse>;
    getProposalVote(id: string, voterAddr: string): Promise<ProposalVotesResponse | ModuleErrorResponse>;
    getProposalTallyResult(id: string): Promise<ProposalTallyResponse | ModuleErrorResponse>;
    getDepositParameters(): Promise<DepositParametersResponse>;
    getTallyParameters(): Promise<TallyParametersResponse>;
    getVotingParameters(): Promise<VotingParametersResponse>;
}
export declare function useGovernance(): GovernanceModule;
