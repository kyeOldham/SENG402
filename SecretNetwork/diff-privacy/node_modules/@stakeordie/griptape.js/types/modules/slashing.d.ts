import BlockchainModule from './base';
import { Fee, ModuleBaseResponse, ModuleBodyRequest, ModuleErrorResponse, ModulePostResponse, Signature } from './types';
export interface SlashingSigningInfoResponse extends ModuleBaseResponse {
    result: SlashingSigninInfoResult[];
}
export interface SlashingParametersResponse extends ModuleBaseResponse {
    result: SlashingParametersResult;
}
export interface SlashingSigninInfoResult {
    address: string;
    start_height: string;
    index_offset: string;
    jailed_until: Date;
    tombstoned: boolean;
    missed_blocks_counter: string;
}
export interface SlashingParametersResult {
    signed_blocks_window: string;
    min_signed_per_window: string;
    downtime_jail_duration: string;
    slash_fraction_double_sign: string;
    slash_fraction_downtime: string;
}
export interface UnJailValidatorRequest {
    base_req: {
        from: string;
        chain_id: string;
        msg: string[];
        fee: Fee;
        memo: string;
        signatures: Signature[];
    };
}
export declare class SlashingModule extends BlockchainModule {
    getSigningInfo(page?: number, limit?: number): Promise<SlashingSigningInfoResponse>;
    getParameters(): Promise<SlashingParametersResponse>;
    unJailValidator(validatorAddr: string, base_req: ModuleBodyRequest): Promise<ModulePostResponse | ModuleErrorResponse>;
}
export declare function useSlashing(): SlashingModule;
