import BlockchainModule from './base';
import { Amount, ModuleBaseResponse, ModuleBodyRequest, ModulePostResponse } from './types';
export interface StakingBaseResult {
    delegator_address: string;
    validator_address: string;
    shares: string;
    balance: Amount;
}
export interface StakingBaseResponse extends ModuleBaseResponse {
    result: StakingBaseResult[];
}
export interface UnbondingDelegationsByDelegatorResponse extends ModuleBaseResponse {
    result: Array<{
        delegator_address: string;
        validator_address: string;
        initial_balance: string;
        balance: string;
        creation_height: number;
        min_time: number;
    }>;
}
export interface UbondingDelegationsDelegatorValidatorResponse extends ModuleBaseResponse {
    result: {
        delegator_address: string;
        validator_address: string;
        entries: Array<{
            initial_balance: string;
            balance: string;
            creation_height: string;
            min_time: string;
        }>;
    };
}
export interface StakingValidatorsResult {
    operator_address: string;
    consensus_pubkey: string;
    jailed: boolean;
    status: number;
    tokens: string;
    delegator_shares: string;
    description: {
        moniker: string;
        identity: string;
        website: string;
        security_contact: string;
        details: string;
    };
    bond_height: string;
    bond_intra_tx_counter: number;
    unbonding_height: string;
    unbonding_time: Date;
    commission: {
        rate: string;
        max_rate: string;
        max_change_rate: string;
        update_time: Date;
    };
}
export interface StakingValidatorsResponse extends ModuleBaseResponse {
    result: StakingValidatorsResult[];
}
export interface ValidatorInfoResponse extends ModuleBaseResponse {
    result: StakingValidatorsResult;
}
export interface CurrentStateOfStakingPoolResponse extends ModuleBaseResponse {
    result: {
        bonded_tokens: string;
        not_bonded_tokens: string;
    };
}
export interface CurrentStakingParameterValuesResponse extends ModuleBaseResponse {
    result: {
        bond_denom: string;
        historical_entries: number;
        max_entries: number;
        max_validators: number;
        unbonding_time: string;
    };
}
export interface submitDelegationRequest extends ModuleBodyRequest {
    delegator_address: string;
    validator_address: string;
    delegation: Amount;
}
export interface SubmitUnbondingDelegationRequest extends ModuleBodyRequest {
    delegator_address: string;
    validator_address: string;
    shares: string;
}
export interface SubmitRedelegationRequest extends ModuleBodyRequest {
    delegator_address: string;
    validator_src_addressess: string;
    validator_dst_address: string;
    shares: string;
}
export declare class StakingModule extends BlockchainModule {
    getAllDelegationsByDelegator(delegatorAddr: string): Promise<StakingBaseResponse>;
    queryCurrentDelegationBetweenDelegatorValidator(delegatorAddr: string, validatorAddr: string): Promise<StakingBaseResponse>;
    getAllUnbondingDelegationsByDelegator(delegatorAddr: string): Promise<UnbondingDelegationsByDelegatorResponse>;
    queryAllUbondingDelegationsBetweenDelegatorAndValidator(delegatorAddr: string, validatorAddr: string): Promise<UbondingDelegationsDelegatorValidatorResponse>;
    queryAllValidatorsThatDelegatorIsBondedTo(delegatorAddr: string): Promise<StakingValidatorsResponse>;
    queryValidatorThatDelegatorIsBondedTo(delegatorAddr: string, validatorAddr: string): Promise<ValidatorInfoResponse>;
    stakingValidators(): Promise<StakingValidatorsResponse>;
    queryValidatorInfo(validatorAddr: string): Promise<ValidatorInfoResponse>;
    gettAllDelegationsByValidator(validatorAddr: string): Promise<StakingBaseResponse>;
    getCurrentStateOfStakingPool(): Promise<CurrentStateOfStakingPoolResponse>;
    getCurrentStakingParameterValues(): Promise<CurrentStakingParameterValuesResponse>;
    submitDelegation(delegatorAddr: string, body_request: submitDelegationRequest): Promise<ModulePostResponse>;
    submitUnbondingDelegation(delegatorAddr: string, body_request: SubmitUnbondingDelegationRequest): Promise<ModulePostResponse>;
    submitRedelegation(delegatorAddr: string, body_request: SubmitRedelegationRequest): Promise<ModulePostResponse>;
}
export declare function useStaking(): StakingModule;
