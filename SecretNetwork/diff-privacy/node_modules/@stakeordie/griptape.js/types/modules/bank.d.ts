import BlockchainModule from './base';
import { ModuleBaseResponse, BaseReq, Deposit, Fee, ModuleErrorResponse, Signature } from './types';
export interface BankBalanceResponse extends ModuleBaseResponse {
    result: Deposit[];
}
export interface BankTransferReq {
    base_req: BaseReq;
    amount: Deposit[];
}
export interface BankTransferResponse {
    type: string;
    value: BankTransferResponseValue;
}
export interface BankTransferResponseValue {
    msg: BankMsg[];
    fee: Fee;
    signatures: Signature;
    memo: string;
}
export interface BankMsg {
    type: string;
    value: BankMsgValue;
}
export interface BankMsgValue {
    from_address: string;
    to_address: string;
    amount: Deposit[];
}
export declare class BankModule extends BlockchainModule {
    getBalance(address: string): Promise<BankBalanceResponse | ModuleErrorResponse>;
    transfer(address: string, body_request: BankTransferReq): Promise<BankTransferResponse | ModuleErrorResponse>;
}
export declare function useBank(): BankModule;
