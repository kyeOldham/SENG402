import BlockchainModule from './base';
import { Amount, ModuleBaseResponse, ModuleBodyRequest, ModuleErrorResponse, ModulePostResponse, ModuleSimpleResponse } from './types';
export interface TotalRewardsRequest {
    rewards: DistributionReward[];
    total: Amount[];
}
export interface DistributionReward {
    validator_address: string;
    reward: Amount[];
}
export interface TotalRewardsResponse extends ModuleBaseResponse {
    result: TotalRewardsRequest;
}
export interface ReplaceRewardsWithdrawalAddressRequest extends ModuleBodyRequest {
    withdraw_address: string;
}
export interface GetValidatorDistributionInfoResult {
    operator_address: string;
    self_bond_rewards: Amount[];
    val_commission: Amount[];
}
export interface GetValidatorDistributionInfoResponse extends ModuleBaseResponse {
    result: GetValidatorDistributionInfoResult;
}
export interface GetDistributionBaseResponse extends ModuleBaseResponse {
    result: Amount[];
}
export interface GetFeeDistributionParametersResult {
    community_tax: string;
    base_proposer_reward: string;
    bonus_proposer_reward: string;
    withdraw_addr_enabled: boolean;
    secret_foundation_tax: string;
    secret_foundation_address: string;
}
export interface GetFeeDistributionParametersResponse extends ModuleBaseResponse {
    result: GetFeeDistributionParametersResult;
}
export declare class DistributionModule extends BlockchainModule {
    getTotalRewards(delegatorAddr: string): Promise<TotalRewardsResponse>;
    withDrawAllRewards(delegatorAddr: string, body: ModuleBodyRequest): Promise<ModulePostResponse | ModuleErrorResponse>;
    queryDelegationReward(delegatorAddr: string, validatorAddr: string): Promise<GetDistributionBaseResponse>;
    withdrawDelegationReward(delegatorAddr: string, validatorAddr: string, body: ModuleBodyRequest): Promise<ModulePostResponse | ModuleErrorResponse>;
    getRewardsWithdrawalAddress(delegatorAddr: string): Promise<ModuleSimpleResponse>;
    replaceRewardsWithdrawalAddress(delegatorAddr: string, body: ReplaceRewardsWithdrawalAddressRequest): Promise<ModulePostResponse | ModuleErrorResponse>;
    getValidatorDistributionInfo(validatorAddr: string): Promise<GetValidatorDistributionInfoResponse>;
    getFeeDistributionOustandingRewards(validatorAddr: string): Promise<GetDistributionBaseResponse>;
    queryCommissionSelfDelegationRewards(validatorAddr: string): Promise<GetDistributionBaseResponse>;
    withdrawValidatorsRewards(validatorAddr: string, body: ModuleBodyRequest): Promise<ModulePostResponse>;
    getCommunnityPoolParameters(): Promise<GetDistributionBaseResponse>;
    getFeeDistributionParameters(): Promise<GetFeeDistributionParametersResponse>;
}
export declare function useDistribution(): DistributionModule;
