import { BaseContract, ContractDefinition, ContractMessageResponse } from '../types';
export declare const snip20Def: ContractDefinition;
export declare const snip20BasePermitDef: ContractDefinition;
export declare const snip20PermitDef: ContractDefinition;
export interface MessageResponse {
    status: string;
}
export interface Snip20Contract extends BaseContract {
    getBalance(): Promise<{
        balance: {
            amount: string;
        };
    }>;
    getTokenInfo(): Promise<{
        name: string;
        symbol: string;
        decimals: number;
        total_supply: string;
    }>;
    getTransferHistory(page_size: number, page?: number): Promise<{
        transfer_history: {
            txs: [
                {
                    id: string;
                    from: string;
                    sender: string;
                    receiver: string;
                }
            ];
            coins: {
                amount: string;
                denom: string;
            };
        };
    }>;
    getMinters(): Promise<{
        minters: {
            minters: string[];
        };
    }>;
    getAllowance(owner: string, spender: string, key?: string): Promise<{
        allowance: {
            spender: string;
            owner: string;
            allowance: string;
            expiration: number;
        };
    }>;
    getExchangeRate(): Promise<{
        exchange_rate: {
            rate: string;
            denom: string;
        };
    }>;
    transfer(recipient: string, amount: string): Promise<ContractMessageResponse<{
        transfer: MessageResponse;
    }>>;
    send(recipient: string, amount: string, msg?: string): Promise<ContractMessageResponse<{
        send: MessageResponse;
    }>>;
    registerReceived(code_hash: string): Promise<ContractMessageResponse<{
        register_receive: MessageResponse;
    }>>;
    createViewingKey(): Promise<ContractMessageResponse<{
        create_viewing_key: {
            key: string;
        };
    }>>;
    setViewingKey(key: string): Promise<ContractMessageResponse<{
        set_viewing_key: MessageResponse;
    }>>;
    increaseAllowances(spender: string, amount: string, expiration?: number): Promise<ContractMessageResponse<{
        increase_allowance: {
            spender: string;
            owner: string;
            allowance: string;
        };
    }>>;
    decreaseAllowance(spender: string, amount: string, expiration?: number): Promise<ContractMessageResponse<{
        decrease_allowance: {
            spender: string;
            owner: string;
            allowance: string;
        };
    }>>;
    transferFrom(owner: string, recipient: string, amount: string): Promise<ContractMessageResponse<{
        transfer_from: MessageResponse;
    }>>;
    sendFrom(owner: string, recipient: string, amount: string, msg?: string): Promise<ContractMessageResponse<{
        send_from: {
            status: string;
        };
    }>>;
    mint(recipient: string, amount: string): Promise<ContractMessageResponse<{
        mint: {
            status: string;
        };
    }>>;
    setMinters(minters: string[]): Promise<ContractMessageResponse<{
        set_minters: {
            status: string;
        };
    }>>;
    burn(amount: string): Promise<ContractMessageResponse<{
        burn: {
            status: string;
        };
    }>>;
    burnFrom(owner: string, amount: string): Promise<ContractMessageResponse<{
        burn_from: {
            status: string;
        };
    }>>;
    deposit(amount: string): Promise<ContractMessageResponse<{
        deposit: {
            status: string;
        };
    }>>;
    redeem(amount: string, denom?: string): Promise<ContractMessageResponse<{
        redeem: {
            status: string;
        };
    }>>;
}
